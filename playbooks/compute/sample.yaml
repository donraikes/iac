---
# Copyright (c) 2020, 2022 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Launch a compute instance and connect to it using SSH
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "DevTest1-phx.vcn"
    vcn_cidr_block: "100.102.96.0/19"

    instance_subnet_id: "ocid1.subnet.oc1.iad.aaaaaaaakxbbuouivaig3oqrnm7cvpmpvaxd65lvygg2iu5rao7ygo55pdca" 
    subnet_cidr: "100.102.112.0/20"
    subnet_name: "common.sub"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard2.1', true) }}"
    instance_hostname: "acrToolAsh2"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    instance_ad: "{{ lookup('env', 'SAMPLE_AD_NAME') }}"
    instance_compartment: "{{ lookup('env', 'SAMPLE_COMPARTMENT_OCID') }}"
    # provide an "OL" image
    # find OL image ocids per region here: https://docs.cloud.oracle.com/iaas/images/image/501c6e22-4dc6-4e99-b045-cae47aae343f/
    instance_image: "{{ lookup('env', 'SAMPLE_IMAGE_OCID') }}"

  tasks:
    - block:
      - import_tasks: setup.yaml

      - set_fact:
          SSH_AUTHORIZED_KEYS: "{{ lookup('env', 'SAMPLE_PUBLIC_SSH_KEY') if 'SAMPLE_PUBLIC_SSH_KEY' in ansible_env else lookup('file',  my_test_public_key ) }}"

      - name: Launch an instance
        oci_compute_instance:
          availability_domain: "{{ instance_ad }}"
          compartment_id: "{{ instance_compartment }}"
          name: "acr_ash_2"
          image_id: "{{ instance_image }}"
          shape: "{{ instance_shape }}"
          create_vnic_details:
              assign_public_ip: False
              hostname_label: "{{ instance_hostname }}"
              subnet_id: "{{ instance_subnet_id }}"
          metadata:
              ssh_authorized_keys: "{{ SSH_AUTHORIZED_KEYS }}"
          shape_config:
             ocpus: "1"
             memory_in_gbs: "16"
        register: result

      - name: Print instance details
        debug:
          msg: "Launched a new instance {{ result }}"
      - set_fact:
          instance_id: "{{result.instance.id }}"

      - name: Get the VNIC attachment details of instance
        oci_compute_vnic_attachment_facts:
          compartment_id: "{{ instance_compartment }}"
          instance_id: "{{ instance_id }}"
        register: result

      - name: Get details of the VNIC
        oci_network_vnic_facts:
          id: "{{ result.vnic_attachments[0].vnic_id }}"
        register: result
      - set_fact:
          instance_private_ip: "{{result.vnic.private_ip}}"

      - name: Print the public ip of the newly launched instance
        debug:
          msg: "private IP of launched instance {{ instance_private_ip }}"

      - name: Wait (upto 10 minutes) for port 22 to become open
        wait_for:
          port: 22
          host: '{{ instance_private_ip }}'
          state: started
          delay: 10
          timeout: 600
        vars:
          ansible_connection: local

      - set_fact:
          # Use "opc" user as this is an OL image
          # Disable SSH's strict host key checking just for this one command invocation
          ssh_command_with_generated_key: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -i {{ temp_certificates_path }}/private_key.pem opc@{{ instance_private_ip }} uname -a
        when: "'SAMPLE_PUBLIC_SSH_KEY' not in ansible_env"
      
      - set_fact:
          # Use "opc" user as this is an OL image
          # Disable SSH's strict host key checking just for this one command invocation
          ssh_command_with_custom_key: ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" opc@{{ instance_private_ip }} uname -a
        when: "'SAMPLE_PUBLIC_SSH_KEY' in ansible_env"

      - name: Attempt a ssh connection to the newly launched instance
        command: "{{ ssh_command_with_custom_key if 'SAMPLE_PUBLIC_SSH_KEY' in ansible_env else ssh_command_with_generated_key }}"
        retries: 3
        delay: 5
        register: result
        until: result.rc == 0

      - name: Print SSH response from launched instance
        debug:
          msg: "SSH response from instance -> {{ result.stdout_lines }}"

      - import_tasks: configureBackup.yaml
#      - import_tasks: teardown.yaml

      rescue:

        - import_tasks: teardown.yaml
